C51 COMPILER V9.54   BMP085                                                                10/13/2015 11:38:07 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE BMP085
OBJECT MODULE PLACED IN bmp085.obj
COMPILER INVOKED BY: C:\Keil_c51\C51\BIN\C51.EXE BMP085\bmp085.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT
                    -(.\bmp085.lst) TABS(2) OBJECT(bmp085.obj)

line level    source

   1          #include "bmp085.h"
   2          
   3          #define uchar u8
   4          #define OSS 0 // Oversampling Setting (note: code is not set up to use other OSS values)
   5          
   6          short ac1;
   7          short ac2; 
   8          short ac3; 
   9          unsigned short ac4;
  10          unsigned short ac5;
  11          unsigned short ac6;
  12          short b1; 
  13          short b2;
  14          short mb;
  15          short mc;
  16          short md;
  17          long  temperature;
  18          long  pressure;
  19          float tempdat=0;
  20          unsigned char outdata[6]={0};
  21          //*********************************************************
  22          //??BMP085????,????
  23          //*********************************************************
  24          short Multiple_read(uchar ST_Address)
  25          {   
  26   1        uchar msb, lsb;
  27   1        short _data;
  28   1          I2C_Start();                          //????
  29   1          I2C_WriteAbyte(BMP085_SlaveAddress);    //??????+???
  30   1          I2C_WriteAbyte(ST_Address);             //????????
  31   1          I2C_Start();                          //????
  32   1          I2C_WriteAbyte(BMP085_SlaveAddress+1);         //??????+???
  33   1      
  34   1          msb = I2C_ReadAbyte();                 //BUF[0]??
  35   1          //I2C_SendACK(0);                       //??ACK
  36   1        S_ACK();
  37   1          lsb = I2C_ReadAbyte();     
  38   1        //I2C_SendACK(1);                       //?????????NOACK
  39   1        S_NoACK(); 
  40   1          I2C_Stop();                           //????
  41   1          //Delay5ms();
  42   1          _data = msb << 8;
  43   1        _data |= lsb; 
  44   1        return _data;
  45   1      }
  46          
  47          
  48          //******************************************************************************************************
  49          //3?¨º??¡¥MPU6050
  50          //******************************************************************************************************
  51          void InitBMP085(void)
  52          { 
  53   1        u8 tmp[16]={"temperture:00.0 "};
  54   1        u8 pres[19] = {"pressure:000000 Pa"};
C51 COMPILER V9.54   BMP085                                                                10/13/2015 11:38:07 PAGE 2   

  55   1      
  56   1        ac1 = Multiple_read(0xAA);
  57   1        ac2 = Multiple_read(0xAC);
  58   1        ac3 = Multiple_read(0xAE);
  59   1        ac4 = Multiple_read(0xB0);
  60   1        ac5 = Multiple_read(0xB2);
  61   1        ac6 = Multiple_read(0xB4);
  62   1        b1 =  Multiple_read(0xB6);
  63   1        b2 =  Multiple_read(0xB8);
  64   1        mb =  Multiple_read(0xBA);
  65   1        mc =  Multiple_read(0xBC);
  66   1        md =  Multiple_read(0xBE);
  67   1      
  68   1        LCD_ShowString(150, 150, "temperture:");
  69   1        LCD_ShowString(150, 120, "pressure:");
  70   1      }
  71          //********************************************************************
  72          long bmp085ReadTemp(void)
  73          {
  74   1      
  75   1          I2C_Start();                  //????
  76   1          //I2C_SendByte(BMP085_SlaveAddress);   //??????+???
  77   1        I2C_WriteAbyte(BMP085_SlaveAddress);
  78   1          I2C_WriteAbyte(0xF4);           // write register address
  79   1          I2C_WriteAbyte(0x2E);         // write register data for temp
  80   1          I2C_Stop();                   //??????
  81   1          I2C_delay();  // max time is 4.5ms
*** WARNING C206 IN LINE 81 OF BMP085\bmp085.c: 'I2C_delay': missing function-prototype
  82   1        
  83   1        return (long) Multiple_read(0xF6);
  84   1      }
  85          //*************************************************************
  86          long bmp085ReadPressure(void)
  87          {
  88   1        long pressure = 0;
  89   1      
  90   1          I2C_Start();                   //????
  91   1          I2C_WriteAbyte(BMP085_SlaveAddress);   //??????+???
  92   1          I2C_WriteAbyte(0xF4);           // write register address
  93   1          I2C_WriteAbyte(0x34);           // write register data for pressure
  94   1          I2C_Stop();                    //??????
  95   1        I2C_delay();                        // max time is 4.5ms
  96   1        
  97   1        pressure = Multiple_read(0xF6);
  98   1        pressure &= 0x0000FFFF;
  99   1        
 100   1        return pressure;  
 101   1        //return (long) bmp085ReadShort(0xF6);
 102   1      }
 103          
 104          //***********************************************************************
 105          void bmp085Convert(void)
 106          {
 107   1        unsigned int ut = 0;
 108   1        unsigned long up = 0;
 109   1        long x1, x2, b5, b6, x3, b3, p;
 110   1        unsigned long b4, b7;
 111   1      
 112   1        ut = bmp085ReadTemp();     // change by enviornment
 113   1        up = bmp085ReadPressure();  // change by enviornment
 114   1        
 115   1        x1 = (((long)ut - (long)ac6)*(long)ac5) >> 15;
C51 COMPILER V9.54   BMP085                                                                10/13/2015 11:38:07 PAGE 3   

 116   1        x2 = ((long) mc << 11) / (x1 + md);
 117   1        b5 = x1 + x2;
 118   1        temperature = ((b5 + 8) >> 4);
 119   1        
 120   1        b6 = b5 - 4000;
 121   1        // Calculate B3
 122   1        x1 = (b2 * (b6 * b6)>>12)>>11;
 123   1        x2 = (ac2 * b6)>>11;
 124   1        x3 = x1 + x2;
 125   1        b3 = (((((long)ac1)*4 + x3)<< OSS) + 2)>>2;
 126   1        
 127   1        // Calculate B4
 128   1        x1 = (ac3 * b6)>>13;
 129   1        x2 = (b1 * ((b6 * b6)>>12))>>16;
 130   1        x3 = ((x1 + x2) + 2)>>2;
 131   1        b4 = (ac4 * (unsigned long)(x3 + 32768))>>15;
 132   1        
 133   1        b7 = ((unsigned long)(up - b3) * (50000 >> OSS));
 134   1        if (b7 < 0x80000000)
 135   1          p = (b7<<1)/b4;
 136   1        else
 137   1          p = (b7/b4)<<1;
 138   1          
 139   1        x1 = (p>>8) * (p>>8);
 140   1        x1 = (x1 * 3038)>>16;
 141   1        x2 = (-7357 * p)>>16;
 142   1        pressure = p+((x1 + x2 + 3791)>>4);
 143   1      }
 144          
 145          void bmp085_conversion(long temp_data, u8 *p)
 146          {
 147   1          *p++ = temp_data/100000+0x30;
 148   1          temp_data=temp_data%100000;   
 149   1          *p++=temp_data/10000+0x30;
 150   1          temp_data=temp_data%10000;   
 151   1          *p++=temp_data/1000+0x30;
 152   1          temp_data=temp_data%1000;    
 153   1          *p++=temp_data/100+0x30;
 154   1          temp_data=temp_data%100;     
 155   1          *p++=temp_data/10+0x30;
 156   1          temp_data=temp_data%10;     
 157   1          *p++=temp_data+0x30; 
 158   1      }
 159          
 160          
 161          void DATA_Diplay()
 162          { 
 163   1        u8 tmp[33]={"00.0                             "};
 164   1        u8 pres[19] = {"pressure:000000 Pa"};
 165   1      
 166   1        long temp_value;
 167   1      //  LCD_ShowString(200, 18, bmp_tmp);
 168   1        temp_value=temperature;
 169   1      
 170   1        bmp085_conversion(temp_value, outdata); 
 171   1      
 172   1        tmp[0]=outdata[3];
 173   1        tmp[1]=outdata[4];
 174   1        tmp[3]=outdata[5];
 175   1        LCD_ShowString(238, 150, tmp);
 176   1      //  printf("temperature=%c%c.%c\n",outdata[3],outdata[4],outdata[5]);
 177   1        
C51 COMPILER V9.54   BMP085                                                                10/13/2015 11:38:07 PAGE 4   

 178   1        temp_value = pressure;
 179   1        bmp085_conversion(temp_value, outdata);
 180   1        
 181   1        pres[9]  = outdata[0];
 182   1        pres[10] = outdata[1];
 183   1        pres[11] = outdata[2];
 184   1        pres[12] = outdata[3];
 185   1        pres[13] = outdata[4];
 186   1        pres[14] = outdata[5];  
 187   1        
 188   1        LCD_ShowString(150, 120, pres);
 189   1        //printf("pressure=%c%c%c%c%c%c Pa\n",outdata[0],outdata[1],outdata[2],outdata[3],outdata[4],outdata[5]);
 190   1      }
 191          
 192          void BMP085_Test(void)
 193          {
 194   1      
 195   1          
 196   1        InitBMP085();
 197   1      
 198   1        bmp085Convert();
 199   1        DATA_Diplay();      
 200   1      }
 201          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2136    ----
   CONSTANT SIZE    =    109    ----
   XDATA SIZE       =     40     139
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
